
// const bcrypt = require("bcrypt");
// const jwt = require("jsonwebtoken");
// const User = require("../models/User");

// // ====================== SIGNUP ======================
// exports.signup = async (req, res) => {
//   try {
//     const { name, email, password } = req.body;

//     // Ki·ªÉm tra email tr√πng
//     const existingUser = await User.findOne({ email });
//     if (existingUser) {
//       return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
//     }

//     // M√£ h√≥a m·∫≠t kh·∫©u
//     const hashedPassword = await bcrypt.hash(password, 10);
//     const user = new User({ name, email, password: hashedPassword });
//     await user.save();

//     res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng", user });
//   } catch (err) {
//     res.status(500).json({ message: "L·ªói khi ƒëƒÉng k√Ω", error: err.message });
//   }
// };

// // ====================== LOGIN ======================
// exports.login = async (req, res) => {
//   try {
//     const { email, password } = req.body;

//     console.log("üì© Email nh·∫≠p:", email);
//     console.log("üîë Password nh·∫≠p:", password);

//     // T√¨m user theo email
//     const user = await User.findOne({ email });
//     console.log("üì¶ User t√¨m ƒë∆∞·ª£c trong DB:", user);

//     if (!user) {
//       console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user v·ªõi email n√†y");
//       return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
//     }

//     // So s√°nh m·∫≠t kh·∫©u
//     console.log("üîê Password trong DB:", user.password);
//     const isMatch = await bcrypt.compare(password, user.password);
//     console.log("üßÆ K·∫øt qu·∫£ so s√°nh bcrypt:", isMatch);

//     if (!isMatch) {
//       return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });
//     }

//     // T·∫°o JWT token
//     const token = jwt.sign(
//       { id: user._id, email: user.email },
//       process.env.JWT_SECRET,
//       { expiresIn: "1h" }
//     );

//     res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", token });
//   } catch (err) {
//     console.error("‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:", err);
//     res.status(500).json({ message: "L·ªói khi ƒëƒÉng nh·∫≠p", error: err.message });
//   }
// };

// // ====================== LOGOUT ======================
// exports.logout = (req, res) => {
//   res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
// };




const jwt = require("jsonwebtoken");
const User = require("../models/User");

// ====================== SIGNUP ======================
exports.signup = async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // Ki·ªÉm tra email tr√πng
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    // ‚úÖ Kh√¥ng hash ·ªü ƒë√¢y n·ªØa (model t·ª± hash)
    const user = new User({ name, email, password });
    await user.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng", user });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi ƒëƒÉng k√Ω", error: err.message });
  }
};

// ====================== LOGIN ======================
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    console.log("üì© Email nh·∫≠p:", email);
    console.log("üîë Password nh·∫≠p:", password);

    const user = await User.findOne({ email });
    console.log("üì¶ User t√¨m ƒë∆∞·ª£c trong DB:", user);

    if (!user) {
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user v·ªõi email n√†y");
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    // ‚úÖ D√πng h√†m comparePassword t·ª´ model
    const isMatch = await user.comparePassword(password);
    console.log("üßÆ K·∫øt qu·∫£ so s√°nh bcrypt:", isMatch);

    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });
    }

    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", token });
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:", err);
    res.status(500).json({ message: "L·ªói khi ƒëƒÉng nh·∫≠p", error: err.message });
  }
};

// ====================== LOGOUT ======================
exports.logout = (req, res) => {
  res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
};
// ====================== PROFILE ======================

// üìñ Xem th√¥ng tin c√° nh√¢n
exports.getProfile = async (req, res) => {
  try {
    res.json({ message: "L·∫•y th√¥ng tin th√†nh c√¥ng", user: req.user });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin", error: err.message });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
exports.updateProfile = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const user = await User.findById(req.user._id);

    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    if (name) user.name = name;
    if (email) user.email = email;
    if (password) user.password = password; // model s·∫Ω t·ª± hash v√¨ c√≥ pre("save")

    await user.save();

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t", error: err.message });
  }
};


