
const User = require("../models/userModel");

// üì¶ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
const getUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// ‚ûï Th√™m ng∆∞·ªùi d√πng m·ªõi
const createUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ message: "T√™n, email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" });
    }

    const newUser = new User({ name, email, password, role: role || 'user' });
    const savedUser = await newUser.save();
    const userData = savedUser.toObject();
    delete userData.password;
    res.status(201).json(userData);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o user:", err);
    if (err.code === 11000) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email } = req.body;

    const updatedUser = await User.findByIdAndUpdate(
      id,
      { name, email },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    res.json(updatedUser);
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// ‚ùå X√≥a ng∆∞·ªùi d√πng (Admin ho·∫∑c ch√≠nh m√¨nh)
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    // üõ°Ô∏è Ch·ªâ cho ph√©p n·∫øu l√† admin ho·∫∑c x√≥a ch√≠nh m√¨nh
    if (req.user.role !== "admin" && req.user._id.toString() !== id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi kh√°c" });
    }

    const deletedUser = await User.findByIdAndDelete(id);

    if (!deletedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    res.json({ message: "ƒê√£ x√≥a user th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

module.exports = {
  getUsers,
  createUser,
  updateUser,
  deleteUser,
};

