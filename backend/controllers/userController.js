const User = require("../models/userModel");

// üì¶ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
const getUsers = async (req, res) => {
  try {
    const users = await User.find(); // L·∫•y t·∫•t c·∫£ user trong MongoDB
    res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// ‚ûï Th√™m ng∆∞·ªùi d√πng m·ªõi
const createUser = async (req, res) => {
  try {
    const { name, email } = req.body;

    if (!name || !email) {
      return res.status(400).json({ message: "T√™n v√† email l√† b·∫Øt bu·ªôc" });
    }

    const newUser = new User({ name, email });
    const savedUser = await newUser.save();
    res.status(201).json(savedUser);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o user:", err);
    if (err.code === 11000) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email } = req.body;

    const updatedUser = await User.findByIdAndUpdate(
      id,
      { name, email },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    res.json(updatedUser);
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// ‚ùå X√≥a ng∆∞·ªùi d√πng
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const deletedUser = await User.findByIdAndDelete(id);

    if (!deletedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    res.json({ message: "ƒê√£ x√≥a user th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

module.exports = {
  getUsers,
  createUser,
  updateUser,
  deleteUser,
};
