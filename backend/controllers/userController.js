
const User = require("../models/userModel");

// üì¶ L·∫•y danh s√°ch ng∆∞·ªùi d√πng (Admin, Moderator)
const getUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password");
    
    console.log("üìä TR∆Ø·ªöC KHI S·∫ÆP X·∫æP:");
    users.forEach(u => console.log(`  - ${u.name}: role="${u.role}"`));
    
    // S·∫Øp x·∫øp: Admin ‚Üí Moderator ‚Üí User
    users.sort((a, b) => {
      const roleOrder = { admin: 0, moderator: 1, user: 2 };
      return (roleOrder[a.role] || 3) - (roleOrder[b.role] || 3);
    });
    
    console.log("üìä SAU KHI S·∫ÆP X·∫æP:");
    users.forEach(u => console.log(`  - ${u.name}: role="${u.role}"`));
    
    res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// üìò L·∫•y th√¥ng tin m·ªôt user theo ID (Admin, Moderator)
const getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await User.findById(id).select("-password");
    
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }
    
    res.json(user);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// ‚ûï Th√™m ng∆∞·ªùi d√πng m·ªõi
const createUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ message: "T√™n, email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc" });
    }

    const newUser = new User({ name, email, password, role: role || 'user' });
    const savedUser = await newUser.save();
    const userData = savedUser.toObject();
    delete userData.password;
    res.status(201).json(userData);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o user:", err);
    if (err.code === 11000) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (Admin, Moderator)
const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email, role, password } = req.body;

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin
    if (name) user.name = name;
    if (email) user.email = email;
    
    // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ƒë·ªïi role
    if (role) {
      if (req.user.role === "admin") {
        user.role = role;
      } else {
        return res.status(403).json({ 
          message: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi role" 
        });
      }
    }
    
    if (password) user.password = password; // Pre-save hook s·∫Ω hash

    await user.save();
    
    const userData = user.toObject();
    delete userData.password;
    
    res.json({ message: "C·∫≠p nh·∫≠t user th√†nh c√¥ng", user: userData });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t user:", err);
    if (err.code === 11000) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// ‚ùå X√≥a ng∆∞·ªùi d√πng (Admin ho·∫∑c ch√≠nh m√¨nh)
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    // üõ°Ô∏è Ch·ªâ cho ph√©p n·∫øu l√† admin ho·∫∑c x√≥a ch√≠nh m√¨nh
    if (req.user.role !== "admin" && req.user._id.toString() !== id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi kh√°c" });
    }

    const deletedUser = await User.findByIdAndDelete(id);

    if (!deletedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    res.json({ message: "ƒê√£ x√≥a user th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a user:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// üîÑ C·∫≠p nh·∫≠t role c·ªßa user (Admin only)
const updateUserRole = async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;

    if (!role || !["user", "admin", "moderator"].includes(role)) {
      return res.status(400).json({ 
        message: "Role kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: user, admin, moderator" 
      });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    user.role = role;
    await user.save();

    const userData = user.toObject();
    delete userData.password;

    res.json({ 
      message: `ƒê√£ c·∫≠p nh·∫≠t role c·ªßa ${user.name} th√†nh ${role}`, 
      user: userData 
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t role:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
};

module.exports = {
  getUsers,
  getUserById,
  createUser,
  updateUser,
  updateUserRole,
  deleteUser,
};

