

// const mongoose = require("mongoose");
// const bcrypt = require("bcrypt");

// // ƒê·ªãnh nghƒ©a schema ng∆∞·ªùi d√πng
// const userSchema = new mongoose.Schema({
//   name: {
//     type: String,
//     required: true,
//     trim: true, // b·ªè kho·∫£ng tr·∫Øng d∆∞
//   },
//   email: {
//     type: String,
//     required: true,
//     unique: true,
//     lowercase: true,
//   },
//   password: {
//     type: String,
//     required: true,
//     minlength: 6, // m·∫≠t kh·∫©u √≠t nh·∫•t 6 k√Ω t·ª±
//   },
// });

// // üîí M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o database
// userSchema.pre("save", async function (next) {
//   if (!this.isModified("password")) return next();
//   const salt = await bcrypt.genSalt(10);
//   this.password = await bcrypt.hash(this.password, salt);
//   next();
// });

// // ‚úÖ H√†m so s√°nh m·∫≠t kh·∫©u khi login
// userSchema.methods.comparePassword = async function (enteredPassword) {
//   return await bcrypt.compare(enteredPassword, this.password);
// };

// module.exports = mongoose.model("User", userSchema);



const mongoose = require("mongoose");
const bcrypt = require("bcrypt");

// ƒê·ªãnh nghƒ©a schema ng∆∞·ªùi d√πng
const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
  },
  password: {
    type: String,
    required: true,
    minlength: 6,
  },
});

// üîí Hash m·∫≠t kh·∫©u t·ª± ƒë·ªông tr∆∞·ªõc khi l∆∞u v√†o DB
userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// ‚úÖ H√†m so s√°nh m·∫≠t kh·∫©u khi login
userSchema.methods.comparePassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

module.exports = mongoose.model("User", userSchema);

