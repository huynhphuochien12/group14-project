// backend/routes/authRoutes.js
const express = require("express");
const router = express.Router();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/userModel");
const RefreshToken = require("../models/RefreshToken");
require("dotenv").config();
const crypto = require("crypto");
const nodemailer = require("nodemailer");
const cloudinary = require("cloudinary").v2;
const streamifier = require("streamifier");

// Import logging & rate limiting middleware
const { logActivity, createLog } = require("../middleware/logMiddleware");
const {
  loginLimiter,
  forgotPasswordLimiter,
} = require("../middleware/rateLimitMiddleware");

// ==========================
// ‚òÅÔ∏è C·∫•u h√¨nh Cloudinary
// ==========================
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// ==========================
// üìå ƒêƒÉng k√Ω t√†i kho·∫£n
// ==========================
router.post("/register", logActivity("REGISTER"), async (req, res) => {
  const { name, email, password } = req.body;

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      // Log failed registration
      await createLog({
        userName: name,
        userEmail: email,
        action: "REGISTER_FAILED",
        method: "POST",
        endpoint: "/api/auth/register",
        statusCode: 400,
        ipAddress: req.ip || req.connection.remoteAddress,
        userAgent: req.get("user-agent"),
        metadata: { reason: "Email already exists" },
        success: false,
        errorMessage: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
      });

      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }

    const newUser = new User({
      name,
      email,
      password,
      role: "user",
    });

    await newUser.save();

    const userData = newUser.toObject();
    delete userData.password;

    // Log successful registration
    await createLog({
      userId: newUser._id,
      userName: newUser.name,
      userEmail: newUser.email,
      action: "REGISTER_SUCCESS",
      method: "POST",
      endpoint: "/api/auth/register",
      statusCode: 201,
      ipAddress: req.ip || req.connection.remoteAddress,
      userAgent: req.get("user-agent"),
      metadata: { role: newUser.role },
      success: true,
    });

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      user: userData,
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err.message);
    res.status(500).json({ message: "L·ªói server" });
  }
});

// ==========================
// üîê ƒêƒÉng nh·∫≠p
// ==========================
router.post(
  "/login",
  loginLimiter, // Rate limiting - max 5 attempts per 15 min
  logActivity("LOGIN"),
  async (req, res) => {
    const { email, password } = req.body;

    try {
      const user = await User.findOne({ email });
      console.log("Login attempt for email:", email);

      if (!user) {
        // Log failed login - user not found
        await createLog({
          userEmail: email,
          action: "LOGIN_FAILED",
          method: "POST",
          endpoint: "/api/auth/login",
          statusCode: 400,
          ipAddress: req.ip || req.connection.remoteAddress,
          userAgent: req.get("user-agent"),
          metadata: { reason: "User not found", email },
          success: false,
          errorMessage: "Email kh√¥ng t·ªìn t·∫°i",
        });

        return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
      }

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        // Log failed login - wrong password
        await createLog({
          userId: user._id,
          userName: user.name,
          userEmail: user.email,
          action: "LOGIN_FAILED",
          method: "POST",
          endpoint: "/api/auth/login",
          statusCode: 400,
          ipAddress: req.ip || req.connection.remoteAddress,
          userAgent: req.get("user-agent"),
          metadata: { reason: "Wrong password", email },
          success: false,
          errorMessage: "Sai m·∫≠t kh·∫©u",
        });

        return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });
      }

      if (!process.env.JWT_SECRET || !process.env.JWT_REFRESH_SECRET) {
        console.error(
          "‚ùå Thi·∫øu JWT_SECRET ho·∫∑c JWT_REFRESH_SECRET trong .env"
        );
        return res.status(500).json({ message: "L·ªói c·∫•u h√¨nh m√°y ch·ªß" });
      }

      // ‚úÖ T·∫°o Access Token & Refresh Token
      const accessToken = jwt.sign(
        { userId: user._id },
        process.env.JWT_SECRET,
        {
          expiresIn: "15m",
        }
      );

      const refreshToken = jwt.sign(
        { userId: user._id },
        process.env.JWT_REFRESH_SECRET,
        { expiresIn: "7d" }
      );

      // ‚úÖ L∆∞u Refresh Token v√†o DB
      await RefreshToken.create({
        userId: user._id,
        token: refreshToken,
      });

      const userData = user.toObject();
      delete userData.password;

      // Log successful login
      await createLog({
        userId: user._id,
        userName: user.name,
        userEmail: user.email,
        action: "LOGIN_SUCCESS",
        method: "POST",
        endpoint: "/api/auth/login",
        statusCode: 200,
        ipAddress: req.ip || req.connection.remoteAddress,
        userAgent: req.get("user-agent"),
        metadata: { role: user.role },
        success: true,
      });

      res.json({
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
        accessToken,
        refreshToken,
        user: userData,
      });
    } catch (err) {
      console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err.message);
      res.status(500).json({ message: "L·ªói server" });
    }
  }
);

// ==========================
// ‚ôªÔ∏è Refresh Access Token
// ==========================
router.post("/refresh", async (req, res) => {
  const { refreshToken } = req.body;
  if (!refreshToken)
    return res.status(401).json({ message: "Thi·∫øu refresh token" });

  // Ki·ªÉm tra token c√≥ trong DB kh√¥ng
  const storedToken = await RefreshToken.findOne({ token: refreshToken });
  if (!storedToken)
    return res.status(403).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã x√≥a" });

  try {
    // X√°c th·ª±c refresh token
    const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);

    // T·∫°o access token m·ªõi
    const newAccessToken = jwt.sign(
      { userId: decoded.userId },
      process.env.JWT_SECRET,
      { expiresIn: "15m" }
    );

    res.json({ accessToken: newAccessToken });
  } catch (err) {
    res.status(403).json({ message: "Refresh token h·∫øt h·∫°n ho·∫∑c sai" });
  }
});

// ==========================
// üö™ Logout
// ==========================
router.post("/logout", async (req, res) => {
  const { refreshToken } = req.body;
  if (refreshToken) {
    await RefreshToken.findOneAndDelete({ token: refreshToken });
  }
  res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
});

// ==========================
// üîÅ Qu√™n m·∫≠t kh·∫©u - g·ª≠i token reset
// ==========================
router.post(
  "/forgot-password",
  forgotPasswordLimiter, // Rate limiting - max 3 per hour
  logActivity("FORGOT_PASSWORD"),
  async (req, res) => {
  const { email } = req.body;
  
  if (!email) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email" });
  }

  try {
    const user = await User.findOne({ email });
    
    // Security: Kh√¥ng ti·∫øt l·ªô email c√≥ t·ªìn t·∫°i hay kh√¥ng
    if (!user) {
      console.log(`üìß Forgot password request for non-existent email: ${email}`);
      return res.json({ 
        message: "N·∫øu email t·ªìn t·∫°i trong h·ªá th·ªëng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u" 
      });
    }

    // Sinh reset token ng·∫´u nhi√™n
    const resetToken = crypto.randomBytes(32).toString("hex");
    const tokenHash = crypto.createHash("sha256").update(resetToken).digest("hex");

    // L∆∞u token hash v√†o DB (1 gi·ªù h·∫øt h·∫°n)
    user.resetPasswordToken = tokenHash;
    user.resetPasswordExpires = Date.now() + 1000 * 60 * 60; // 1 hour
    await user.save({ validateBeforeSave: false });

    const resetUrl = `${process.env.CLIENT_URL || "http://localhost:3000"}/reset-password?token=${resetToken}`;

    console.log(`üîë Reset token generated for: ${email}`);
    console.log(`üîó Reset URL: ${resetUrl}`);

    // Ki·ªÉm tra SMTP config
    if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS) {
      try {
        const transporter = nodemailer.createTransport({
          host: process.env.SMTP_HOST,
          port: Number(process.env.SMTP_PORT) || 587,
          secure: process.env.SMTP_SECURE === "true",
          auth: { 
            user: process.env.SMTP_USER, 
            pass: process.env.SMTP_PASS 
          },
        });

        // Email HTML ƒë·∫πp
        const emailHtml = `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
              .button { display: inline-block; padding: 15px 30px; background: #667eea; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; font-weight: bold; }
              .button:hover { background: #5568d3; }
              .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
              .warning { background: #fff3cd; border-left: 4px solid #ffc107; padding: 10px; margin: 15px 0; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>üîê ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u</h1>
              </div>
              <div class="content">
                <p>Xin ch√†o <strong>${user.name}</strong>,</p>
                <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
                <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
                <div style="text-align: center;">
                  <a href="${resetUrl}" class="button">ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u</a>
                </div>
                <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
                <p style="background: #fff; padding: 10px; border: 1px solid #ddd; border-radius: 5px; word-break: break-all;">
                  <a href="${resetUrl}">${resetUrl}</a>
                </p>
                <div class="warning">
                  <strong>‚ö†Ô∏è L∆∞u √Ω:</strong>
                  <ul style="margin: 5px 0;">
                    <li>Link n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>1 gi·ªù</strong></li>
                    <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y</li>
                    <li>Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                  </ul>
                </div>
                <p>Tr√¢n tr·ªçng,<br><strong>Tech University Team</strong></p>
              </div>
              <div class="footer">
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
                <p>&copy; 2024 Tech University. All rights reserved.</p>
              </div>
            </div>
          </body>
          </html>
        `;

        await transporter.sendMail({
          from: process.env.SMTP_FROM || `"Tech University" <${process.env.SMTP_USER}>`,
          to: email,
          subject: "üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Tech University",
          text: `Xin ch√†o ${user.name},\n\nNh·∫•n v√†o li√™n k·∫øt sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:\n${resetUrl}\n\nLink c√≥ hi·ªáu l·ª±c trong 1 gi·ªù.\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y.\n\nTr√¢n tr·ªçng,\nTech University Team`,
          html: emailHtml,
        });

        console.log(`‚úÖ Reset password email sent to: ${email}`);
        return res.json({ 
          message: "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n." 
        });
      } catch (emailError) {
        console.error("‚ùå L·ªói g·ª≠i email:", emailError);
        // V·∫´n tr·∫£ v·ªÅ token ƒë·ªÉ test khi email fail
        return res.json({ 
          message: "L·ªói g·ª≠i email. Token ƒë·ªÉ test:", 
          resetToken, 
          resetUrl,
          error: emailError.message 
        });
      }
    } else {
      // Kh√¥ng c√≥ SMTP config - Tr·∫£ v·ªÅ token ƒë·ªÉ test
      console.warn("‚ö†Ô∏è SMTP not configured. Returning token for testing.");
      return res.json({ 
        message: "SMTP ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Token ƒë·ªÉ test:", 
        resetToken, 
        resetUrl 
      });
    }
  } catch (err) {
    console.error("‚ùå L·ªói forgot-password:", err);
    res.status(500).json({ message: "L·ªói server khi x·ª≠ l√Ω y√™u c·∫ßu" });
  }
});

// ==========================
// üîê Reset m·∫≠t kh·∫©u b·∫±ng token
// ==========================
router.post("/reset-password", async (req, res) => {
  const { token, password } = req.body;
  
  // Validation
  if (!token || !password) {
    return res.status(400).json({ message: "Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });
  }

  if (password.length < 6) {
    return res.status(400).json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
  }

  try {
    // Hash token ƒë·ªÉ so s√°nh v·ªõi DB
    const tokenHash = crypto.createHash("sha256").update(token).digest("hex");
    
    // T√¨m user v·ªõi token h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n
    const user = await User.findOne({
      resetPasswordToken: tokenHash,
      resetPasswordExpires: { $gt: Date.now() },
    });

    if (!user) {
      console.log(`‚ùå Invalid or expired reset token: ${token.substring(0, 10)}...`);
      return res.status(400).json({ 
        message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi." 
      });
    }

    console.log(`üîê Resetting password for user: ${user.email}`);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi (s·∫Ω t·ª± ƒë·ªông hash b·ªüi pre-save hook)
    user.password = password;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;

    await user.save();

    console.log(`‚úÖ Password reset successful for: ${user.email}`);

    // G·ª≠i email x√°c nh·∫≠n (optional)
    if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS) {
      try {
        const transporter = nodemailer.createTransport({
          host: process.env.SMTP_HOST,
          port: Number(process.env.SMTP_PORT) || 587,
          secure: process.env.SMTP_SECURE === "true",
          auth: { 
            user: process.env.SMTP_USER, 
            pass: process.env.SMTP_PASS 
          },
        });

        const confirmEmailHtml = `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
              .success { background: #d1fae5; border-left: 4px solid #10b981; padding: 10px; margin: 15px 0; }
              .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>‚úÖ M·∫≠t Kh·∫©u ƒê√£ ƒê∆∞·ª£c ƒê·∫∑t L·∫°i</h1>
              </div>
              <div class="content">
                <p>Xin ch√†o <strong>${user.name}</strong>,</p>
                <div class="success">
                  <p><strong>‚úÖ Th√†nh c√¥ng!</strong> M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i.</p>
                </div>
                <p>B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù v·ªõi m·∫≠t kh·∫©u m·ªõi.</p>
                <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán thay ƒë·ªïi n√†y, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay l·∫≠p t·ª©c.</p>
                <p>Tr√¢n tr·ªçng,<br><strong>Tech University Team</strong></p>
              </div>
              <div class="footer">
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
                <p>&copy; 2024 Tech University. All rights reserved.</p>
              </div>
            </div>
          </body>
          </html>
        `;

        await transporter.sendMail({
          from: process.env.SMTP_FROM || `"Tech University" <${process.env.SMTP_USER}>`,
          to: user.email,
          subject: "‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i - Tech University",
          text: `Xin ch√†o ${user.name},\n\nM·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng.\n\nB·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù v·ªõi m·∫≠t kh·∫©u m·ªõi.\n\nN·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán thay ƒë·ªïi n√†y, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay l·∫≠p t·ª©c.\n\nTr√¢n tr·ªçng,\nTech University Team`,
          html: confirmEmailHtml,
        });

        console.log(`üìß Password reset confirmation email sent to: ${user.email}`);
      } catch (emailError) {
        console.error("‚ö†Ô∏è Could not send confirmation email:", emailError.message);
        // Kh√¥ng fail request n·∫øu email kh√¥ng g·ª≠i ƒë∆∞·ª£c
      }
    }

    res.json({ 
      message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi." 
    });
  } catch (err) {
    console.error("‚ùå L·ªói reset-password:", err);
    res.status(500).json({ message: "L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u" });
  }
});

module.exports = router;
