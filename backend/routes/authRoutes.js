// backend/routes/authRoutes.js
const express = require("express");
const router = express.Router();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/userModel");
require("dotenv").config();
const crypto = require("crypto");
const nodemailer = require("nodemailer");
const cloudinary = require("cloudinary").v2;
const streamifier = require("streamifier");

// ==========================
// ‚òÅÔ∏è C·∫•u h√¨nh Cloudinary
// ==========================
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// ==========================
// üìå ƒêƒÉng k√Ω t√†i kho·∫£n
// ==========================
router.post("/register", async (req, res) => {
  const { name, email, password } = req.body;

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }

    const newUser = new User({
      name,
      email,
      password,
      role: "user",
    });

    await newUser.save();

    const userData = newUser.toObject();
    delete userData.password;

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      user: userData,
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err.message);
    res.status(500).json({ message: "L·ªói server" });
  }
});

// ==========================
// üîê ƒêƒÉng nh·∫≠p
// ==========================
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    console.log("Login attempt for email:", email);
    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });
    }

    if (!process.env.JWT_SECRET) {
      console.error("‚ùå Thi·∫øu JWT_SECRET trong file .env");
      return res.status(500).json({ message: "L·ªói c·∫•u h√¨nh m√°y ch·ªß" });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: process.env.JWT_EXPIRES_IN || "1d",
    });

    const userData = user.toObject();
    delete userData.password;

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: userData,
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err.message);
    res.status(500).json({ message: "L·ªói server" });
  }
});

// ==========================
// üö™ Logout
// ==========================
router.post("/logout", (req, res) => {
  res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng (xo√° token ·ªü frontend)" });
});

// ==========================
// üîÅ Qu√™n m·∫≠t kh·∫©u - g·ª≠i token reset
// ==========================
router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user)
      return res.json({ message: "N·∫øu email t·ªìn t·∫°i, m·ªôt li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c g·ª≠i" });

    const resetToken = crypto.randomBytes(32).toString("hex");
    const tokenHash = crypto.createHash("sha256").update(resetToken).digest("hex");

    user.resetPasswordToken = tokenHash;
    user.resetPasswordExpires = Date.now() + 1000 * 60 * 60; // 1 gi·ªù
    await user.save({ validateBeforeSave: false }); // ‚úÖ FIX l·ªói password required

    const resetUrl = `${process.env.CLIENT_URL || "http://localhost:3000"}/reset-password?token=${resetToken}`;

    if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS) {
      const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST,
        port: Number(process.env.SMTP_PORT) || 587,
        secure: process.env.SMTP_SECURE === "true",
        auth: { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS },
      });

      await transporter.sendMail({
        from: process.env.SMTP_FROM || process.env.SMTP_USER,
        to: email,
        subject: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u",
        text: `Nh·∫•n v√†o li√™n k·∫øt sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: ${resetUrl}`,
      });

      return res.json({ message: "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i" });
    }

    // üß™ Dev fallback
    res.json({ message: "Reset token created", resetToken, resetUrl });
  } catch (err) {
    console.error("‚ùå L·ªói forgot-password:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
});

// ==========================
// üîê Reset m·∫≠t kh·∫©u b·∫±ng token
// ==========================
router.post("/reset-password", async (req, res) => {
  const { token, password } = req.body;
  if (!token || !password)
    return res.status(400).json({ message: "Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });

  try {
    const tokenHash = crypto.createHash("sha256").update(token).digest("hex");
    const user = await User.findOne({
      resetPasswordToken: tokenHash,
      resetPasswordExpires: { $gt: Date.now() },
    });

    if (!user)
      return res
        .status(400)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });

    user.password = password; // pre-save s·∫Ω hash
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;

    await user.save();

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói reset-password:", err);
    res.status(500).json({ message: "L·ªói server" });
  }
});

module.exports = router;
