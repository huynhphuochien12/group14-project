import React, { useState, useEffect } from "react";
import api from "../../services/api";
import { useToast } from "../../contexts/ToastContext";
import { useLocation, useNavigate } from "react-router-dom";  // üëà Th√™m useNavigate
import "../../App.css";

export default function ResetPasswordForm() {
  const [token, setToken] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const { addToast } = useToast();
  const location = useLocation();
  const navigate = useNavigate(); // üëà Kh·ªüi t·∫°o navigate

  // üîπ L·∫•y token t·ª´ URL (vd: /reset-password?token=abc123)
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const t = params.get("token");
    if (t) setToken(t);
  }, [location.search]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!token || !password) {
      return addToast("Vui l√≤ng nh·∫≠p token v√† m·∫≠t kh·∫©u m·ªõi", "warning");
    }
    if (password !== confirmPassword) {
      return addToast("M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp", "error");
    }

    setLoading(true);
    try {
      await api.post("/auth/reset-password", { token, password });
      addToast("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p l·∫°i.", "success");

      // ‚úÖ Sau khi ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng, quay l·∫°i trang ƒëƒÉng nh·∫≠p
      setTimeout(() => {
        navigate("/login");
      }, 1500); // ƒë·ª£i 1.5 gi√¢y cho toast hi·ªÉn th·ªã xong
    } catch (err) {
      console.error("‚ùå Reset error:", err);
      addToast(err.response?.data?.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i", "error");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-wrap">
      <div className="auth-card">
        <h2 className="auth-title">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
        <p className="auth-sub">
          D√°n token nh·∫≠n ƒë∆∞·ª£c ho·∫∑c d√πng link t·ª´ email, nh·∫≠p m·∫≠t kh·∫©u m·ªõi
        </p>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Reset token</label>
            <input
              type="text"
              value={token}
              onChange={(e) => setToken(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <label>M·∫≠t kh·∫©u m·ªõi</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          <div className="form-group">
            <label>Nh·∫≠p l·∫°i m·∫≠t kh·∫©u</label>
            <input
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>

          <div className="center">
            <button className="btn" type="submit" disabled={loading}>
              {loading ? "ƒêang g·ª≠i..." : "ƒê·ªïi m·∫≠t kh·∫©u"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
